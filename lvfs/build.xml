<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="all" name="lvfs">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="lvfs.classpath">
        <pathelement location="bin"/>
    	<fileset dir="lib">
    		<include name="*.jar" />
        </fileset>
    </path>

	<target name="clean" description="Delete all compiled files">
        <delete dir="bin" quiet="true" />
        <delete dir="${junit.output.dir}" quiet="true" />
    </target>

	<!-- we rather use Hive's jar
	<target name="build-hive-grammar" description="Re-generate Hive's SQL grammer files">
		<echo>Building Grammar src/hive/org/apache/hadoop/hive/ql/parse/Hive.g  ....</echo>
		<java classname="org.antlr.Tool" classpathref="lvfs.classpath" fork="true">
			<arg value="-fo" />
			<arg value="src/hive/org/apache/hadoop/hive/ql/parse" />
			<arg value="src/hive/org/apache/hadoop/hive/ql/parse/Hive.g" />
		</java>
	</target>
	-->

	<target name="compile" description="Compile all java files and copy resources into bin">
        <echo message="${ant.project.name}: ${ant.file}"/>
            <mkdir dir="bin"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includeantruntime="false">
            <src path="src/java"/>
            <!-- <src path="src/hive"/> -->
            <classpath refid="lvfs.classpath"/>
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" source="${source}" target="${target}" includeantruntime="false">
            <src path="src/test"/>
            <classpath refid="lvfs.classpath"/>
        </javac>
		<!-- copy resource files -->
        <copy includeemptydirs="false" todir="bin" failonerror="false">
            <fileset dir="src/java">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin" failonerror="false">
            <fileset dir="src/test">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

	<target name="test" depends="compile" description="Run all unit tests">
        <delete quiet="true">
        	<fileset dir="${junit.output.dir}" includes="*.xml" />
    	</delete>
        <delete dir="${junit.output.dir}" quiet="true" />
        <mkdir dir="${junit.output.dir}" />
        <junit fork="yes" printsummary="no">
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
        	<batchtest todir="${junit.output.dir}" >
                <fileset dir="bin">
                    <include name="**/*Test.class"/>
                </fileset>
        	</batchtest>
            <classpath refid="lvfs.classpath"/>
        </junit>
    </target>

	<target name="testreport" description="Create junit test report">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
	
	<target name="doc" depends="compile" description="Generate Javadoc">
		<delete dir="doc/api" />
		<mkdir dir="doc/api" />
		<javadoc destdir="doc/api">
	        <classpath refid="lvfs.classpath"/>		
			<packageset dir="src/java">
				<include name="**/**"/>
			</packageset>
		</javadoc>
	</target>

	<target name="all" depends="compile,test,doc" description="Do all compilation and tests" />
	<target name="cleanall" depends="clean,compile,test,doc" description="Do all compilation and tests after cleaning" />
	
	<target name="sa-central" depends="compile"
		description="Launch standalone central node. Specify the path of configuration xml (must be in classpath). eg: ant -Dconfxml=lvfs_conf_poseidon.xml -Dformat=true sa-central">
		<java fork="true" classname="edu.brown.lasvegas.server.StandaloneCentralNode">
			<jvmarg value="-Xmx512m"/>
			<jvmarg value="-Xms256m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
<!--			<jvmarg value="-Djava.security.policy=allpermission.policy"/> -->
<!--			<jvmarg value="-Djava.rmi.server.hostname=10.116.70.90"/> -->
			<arg value="${confxml}" />
			<arg value="${format}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="sa-data" depends="compile"
		description="Launch standalone data node. Specify the path of configuration xml (must be in classpath). eg: ant -Dconfxml=lvfs_conf_poseidon.xml -Dformat=true sa-data">
		<java fork="true" classname="edu.brown.lasvegas.server.StandaloneDataNode">
			<jvmarg value="-Xmx2048m"/>
			<jvmarg value="-Xms1524m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
			<arg value="${confxml}" />
			<arg value="${format}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="sa-central-stop" depends="compile"
		description="Stop central node. Specify the path of configuration xml (must be in classpath). eg: ant -Dconfxml=lvfs_conf_poseidon.xml sa-central-stop">
		<java fork="true" classname="edu.brown.lasvegas.server.StopCentralNode">
			<arg value="${confxml}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="sa-data-stop" depends="compile"
		description="Stop data node. Specify the path of configuration xml (must be in classpath) and the data node address. eg: ant -Dconfxml=lvfs_conf_poseidon.xml -Daddress=poseidon.smn.cs.brown.edu:28712 sa-data-stop">
		<java fork="true" classname="edu.brown.lasvegas.server.StopDataNode">
			<arg value="${confxml}" />
			<arg value="${address}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="import-bench" depends="compile"
		description="Start a distributed data import benchmark. Specify the number of partitions, the address of metadata repository, and input file. : ant -Dpartitions=2 -Daddress=poseidon.smn.cs.brown.edu:28710 -Dinputfile=inputs.txt import-bench">
		<java fork="true" classname="edu.brown.lasvegas.lvfs.data.DataImportMultiNodeBenchmark">
			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
			<arg value="${partitions}" />
			<arg value="${address}" />
			<arg value="${inputfile}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="import-bench-tpch" depends="compile"
		description="Start a distributed data import benchmark for TPCH. Specify the number of partitions, the address of metadata repository, and input file for lineitem, part, customer and orders table. : ant -Dpartitions=2 -Daddress=poseidon.smn.cs.brown.edu:28710 -Dinputfile_lineitem=inputs_lineitem.txt -Dinputfile_part=inputs_part.txt -Dinputfile_customer=inputs_customer.txt -Dinputfile_orders=inputs_orders.txt import-bench-tpch">
		<java fork="true" classname="edu.brown.lasvegas.lvfs.data.DataImportMultiNodeTpchBenchmark">
			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
			<arg value="${partitions}" />
			<arg value="${address}" />
			<arg value="${inputfile_lineitem}" />
			<arg value="${inputfile_part}" />
            <arg value="${inputfile_customer}" />
            <arg value="${inputfile_orders}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>

	<target name="tpch-bench-q17-plana" depends="compile"
		description="Run TPCH's Q17. Specify the address of metadata repository, brand name, and container. : ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dbrand=Brand#34 -Dcontainer='MED DRUM' tpch-bench-q17-plana">
		<java fork="true" classname="edu.brown.lasvegas.lvfs.data.TpchQ17MultinodeBenchmark">
			<jvmarg value="-Xmx256m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
			<arg value="${address}" />
			<arg value="${brand}" />
			<arg value="${container}" />
            <arg value="true" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>
    <target name="tpch-bench-q17-planb" depends="compile"
        description="Run TPCH's Q17 with Plan B (slower query plan using non-copartitioned file). Specify the address of metadata repository, brand name, and container. : ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dbrand=Brand#34 -Dcontainer='MED DRUM' tpch-bench-q17-planb">
        <java fork="true" classname="edu.brown.lasvegas.lvfs.data.TpchQ17MultinodeBenchmark">
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-server"/>
            <jvmarg value="-da"/>
            <arg value="${address}" />
            <arg value="${brand}" />
            <arg value="${container}" />
            <arg value="false" />
            <classpath refid="lvfs.classpath"/>
        </java>
    </target>

    <target name="tpch-bench-q18-plana" depends="compile"
        description="Run TPCH's Q18. Specify the address of metadata repository, and quantity threshold(312 to 315). : ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dquantity=312 tpch-bench-q18-plana">
        <java fork="true" classname="edu.brown.lasvegas.lvfs.data.TpchQ18MultinodeBenchmark">
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-server"/>
            <jvmarg value="-da"/>
            <arg value="${address}" />
            <arg value="${quantity}" />
            <arg value="true" />
            <classpath refid="lvfs.classpath"/>
        </java>
    </target>

    <target name="tpch-bench-q18-planb" depends="compile"
        description="Run TPCH's Q18 with Plan B (slower query plan using non-copartitioned file). Specify the address of metadata repository, and quantity threshold(312 to 315). : ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dquantity=312 tpch-bench-q18-planb">
        <java fork="true" classname="edu.brown.lasvegas.lvfs.data.TpchQ18MultinodeBenchmark">
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-server"/>
            <jvmarg value="-da"/>
            <arg value="${address}" />
            <arg value="${quantity}" />
            <arg value="false" />
            <classpath refid="lvfs.classpath"/>
        </java>
    </target>
	
	<target name="hdfs-multi-import" depends="compile"
		description="A utility program to upload a file to HDFS from partitioned files. Specify the address of metadata repository, input file that lists files to import(same format as import-bench-tpch), HDFS path to be created, and HDFS replication factor.: ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dinputfile=inputs_lineitem.txt -Dhdfspath=hdfs://poseidon:9000/tpch/lineitem.tbl -Dreplicationfactor=3 hdfs-multi-import">
		<java fork="true" classname="edu.brown.lasvegas.lvfs.data.HdfsMultiFileImporter">
			<jvmarg value="-Xmx512m"/>
			<jvmarg value="-server"/>
			<jvmarg value="-da"/>
			<arg value="${address}" />
			<arg value="${inputfile}" />
			<arg value="${hdfspath}" />
			<arg value="${replicationfactor}" />
        	<classpath refid="lvfs.classpath"/>
		</java>
	</target>
	

    <target name="cache-flush" depends="compile"
        description="Read a large file in each node to flush disk caches. If you have root permission, just use /proc/sys/vm/drop_caches. This task is for the case you are a normal user. Specify the address of metadata repository and any input file that lists files to read in each node (e.g., the same input file as lineitem import). : ant -Daddress=poseidon.smn.cs.brown.edu:28710 -Dinputfile=inputs_lineitem.txt cache-flush">
        <java fork="true" classname="edu.brown.lasvegas.lvfs.data.CacheFlusher">
            <arg value="${address}" />
            <arg value="${inputfile}" />
            <classpath refid="lvfs.classpath"/>
        </java>
    </target>
</project>
